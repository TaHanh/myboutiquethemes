{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { MongoClient } from 'mongodb';\nimport nextConnect from 'next-connect'; // const client = new MongoClient('mongodb://localhost:27017', {\n//   useNewUrlParser: true,\n//   useUnifiedTopology: true,\n// })\n\nvar mongoClient = null;\nvar MONGODB_URI = 'mongodb://yp9tdlorbv:yp9tdlorbv@176.9.57.130:27017/yp9tdlorbv';\nvar url = 'mongodb://localhost:27017';\nvar dbName = 'tezt'; // MongoClient.connect(url, function (err, client) {\n//   console.log('Connected successfully to server')\n//   mongoClient = client\n//   const db = client.db(dbName)\n//   client.close()\n// })\n// async function database(req, res, next) {\n//   // if (!client.isConnected()) await client.connect()\n//   // req.dbClient = client\n//   // req.db = client.db('tezt')\n//   req.db = mongoClient.db('tezt')\n//   console.log(mongoClient)\n//   return next()\n// }\n\nvar client = new MongoClient(MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nexport function setUpDb(db) {\n  return _regeneratorRuntime.async(function setUpDb$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(db.collection('tokens').createIndex('expireAt', {\n            expireAfterSeconds: 0\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction database(req, res, next) {\n  return _regeneratorRuntime.async(function database$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('fndjsfk', dbName);\n\n          if (client.isConnected()) {\n            _context2.next = 4;\n            break;\n          }\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(client.connect());\n\n        case 4:\n          req.dbClient = client;\n          req.db = client.db(dbName);\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(setUpDb(req.db));\n\n        case 8:\n          return _context2.abrupt(\"return\", next());\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar middleware = nextConnect();\nmiddleware.use(database);\nexport default middleware;","map":null,"metadata":{},"sourceType":"module"}