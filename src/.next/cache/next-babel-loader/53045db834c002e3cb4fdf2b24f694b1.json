{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Axios from 'axios';\nimport config from '../config'; // const limit = 6\n// export default async function getInitialData() {\n//   let posts = []\n//   let categories = []\n//   let compositions = []\n//   let resPost = await Axios.get(config.host.base + config.path.base.posts + '?page=1&&limit=' + limit).catch((e) => {\n//     console.log('Error: ', e.code)\n//   })\n//   let resCate = await Axios.get(config.host.base + config.path.base.categories).catch((e) => {\n//     console.log('Error: ', e.code)\n//   })\n//   let resCompos = await Axios.get(config.host.base + config.path.base.compositions).catch((e) =>\n//     console.log('Error: ', e.code)\n//   )\n//   posts = resPost && resPost.data != undefined ? resPost.data : []\n//   categories = resCate && resCate.data != undefined ? resCate.data : []\n//   compositions = (resCompos && resCompos.data) != undefined ? resCompos.data : []\n//   return { posts: posts, categories: categories, compositions: compositions }\n// }\n\nexport function getInitialDataAside() {\n  var categories, compositions, resCate, resCompos;\n  return _regeneratorRuntime.async(function getInitialDataAside$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          categories = [];\n          compositions = [];\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Axios.get(config.host.base + config.path.base.categories, {\n            timeout: 5000\n          })[\"catch\"](function (e) {\n            console.log('Error: ', e.code);\n          }));\n\n        case 4:\n          resCate = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(Axios.get(config.host.base + config.path.base.compositions, {\n            timeout: 5000\n          })[\"catch\"](function (e) {\n            return console.log('Error: ', e.code);\n          }));\n\n        case 7:\n          resCompos = _context.sent;\n          categories = resCate && resCate.data != undefined ? resCate.data : [];\n          compositions = (resCompos && resCompos.data) != undefined ? resCompos.data : [];\n          console.log(compositions);\n          return _context.abrupt(\"return\", {\n            compositions: compositions,\n            categories: categories\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":null,"metadata":{},"sourceType":"module"}