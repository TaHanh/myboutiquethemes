{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from \"../../components/layout\";\nimport \"../../static/styles/home.scss\";\nimport Aside from \"../../components/aside\";\nimport { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Link from \"next/link\";\nimport config from \"../../config\";\nimport Axios from \"axios\";\nimport { getInitialData } from \"../../store/data\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { convertTitle } from \"../../utils/convert\";\nimport { getInitialDataAside } from \"../../store/data\";\n\nconst FilterPost = props => {\n  const {\n    0: data,\n    1: setData\n  } = useState(props.data);\n  const {\n    0: isLoad,\n    1: setLoad\n  } = useState(false);\n  const {\n    0: isLoadBtn,\n    1: setLoadBtn\n  } = useState(true);\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  useEffect(() => {}, []);\n  return __jsx(Layout, {\n    title: \"Blush\",\n    compositions: props.compositions,\n    categories: props.categories\n  }, __jsx(\"div\", {\n    className: \"site-branding\"\n  }, __jsx(Link, {\n    href: \"/blush-classic\"\n  }, __jsx(\"img\", {\n    src: require(\"../../static/images/blush_title.png\")\n  }))), __jsx(\"div\", {\n    className: \"site-content\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-lg-8\"\n  }, __jsx(\"div\", {\n    className: \"site-main\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, data && data.length > 0 ? data.map((item, index) => {\n    return __jsx(\"div\", {\n      className: \"col-md-6 col-12\"\n    }, __jsx(\"div\", {\n      className: \"card-post\"\n    }, __jsx(\"div\", {\n      className: \"card-entry-thumbnail\"\n    }, __jsx(Link, {\n      href: config.client.posts + \"/\" + convertTitle(item.title) + \"_\" + item.idPost\n    }, __jsx(\"a\", null, __jsx(\"div\", {\n      style: {\n        backgroundImage: \"url(\" + `${config.host.upload + item.image}` + \")\",\n        backgroundPosition: \"center center\",\n        backgroundSize: \"cover\"\n      }\n    }, __jsx(\"img\", {\n      style: {\n        visibility: \"hidden\"\n      },\n      src: require(\"../../static/images/f1.jpg\")\n    }))))), __jsx(\"div\", {\n      className: \"card-entry-body\"\n    }, __jsx(\"div\", {\n      className: \"card-entry-header\"\n    }, __jsx(\"h2\", {\n      className: \"card-entry-title max-line\"\n    }, __jsx(Link, {\n      href: config.client.posts + \"/\" + convertTitle(item.title) + \"_\" + item.idPost\n    }, __jsx(\"a\", null, item.title)))), __jsx(\"div\", {\n      className: \"card-entry-content\"\n    }, __jsx(\"p\", {\n      className: \"max-line\"\n    }, item.description), __jsx(\"div\", {\n      className: \"card-entry-meta\"\n    }, item.tags && item.tags.map((e, i) => {\n      return __jsx(Link, {\n        href: config.client.tags + convertTitle(e)\n      }, __jsx(\"a\", null, e, \" \", i != item.tags.length - 1 ? \", \" : null));\n    })), __jsx(Link, {\n      href: config.client.posts + \"/\" + convertTitle(item.title) + \"_\" + item.idPost\n    }, __jsx(\"a\", {\n      className: \"readmore\"\n    }, __jsx(\"button\", {\n      className: \"btn read-more\"\n    }, \"Read more\")))))));\n  }) : __jsx(\"h5\", null, \"Kh\\xF4ng c\\xF3 b\\xE0i vi\\u1EBFt n\\xE0o ph\\xF9 h\\u1EE3p !\")))), __jsx(\"div\", {\n    className: \"col-lg-4\"\n  }, __jsx(Aside, {\n    categories: props.categories,\n    compositions: props.compositions\n  })))));\n};\n\nFilterPost.getInitialProps = async function (ctx) {\n  const {\n    req,\n    res,\n    query\n  } = ctx;\n  let data = {};\n\n  switch (query.filterPost) {\n    case \"tags\":\n      let resTag = await Axios.get(config.host.base + config.path.base.tags + \"/\" + query.name).catch(e => {\n        console.log(\"Error: \", e.code);\n      });\n      console.log(resTag.data);\n      data = resTag && resTag.data != undefined ? resTag.data : [];\n      break;\n\n    case \"compositions\":\n      console.log(config.host.base + config.path.base.compositionsPost + query.name + \".\" + query.id);\n      let resCom = await Axios.get(config.host.base + config.path.base.compositionsPost + query.name + \".\" + query.id).catch(e => {\n        console.log(\"Error: \", e.code);\n      });\n      console.log(resCom.data);\n      data = resCom && resCom.data != undefined ? resCom.data : [];\n      break;\n\n    case \"categories\":\n      console.log(config.host.base + config.path.base.categoriesPosts + query.name + \".\" + query.id);\n      let resCate = await Axios.get(config.host.base + config.path.base.categoriesPosts + query.name + \".\" + query.id).catch(e => {\n        console.log(\"Error: \", e.code);\n      });\n      console.log(resCate.data);\n      data = resCate && resCate.data != undefined ? resCate.data : [];\n      break;\n\n    case \"search\":\n      var content = query.name.replace(\"-\", \" \");\n      console.log(\"content\", content);\n      console.log(config.host.base + config.path.base.postsFind + content);\n      let res = await Axios.get(config.host.base + config.path.base.postsFind + content).catch(e => {\n        console.log(\"Error: \", e.code);\n      });\n      console.log(res);\n      data = res && res.data != undefined ? res.data : [];\n      break;\n\n    default:\n      break;\n  }\n\n  const dataa = await getInitialDataAside();\n  return _objectSpread({}, dataa, {\n    data: data\n  });\n};\n\nexport default FilterPost;","map":null,"metadata":{},"sourceType":"module"}