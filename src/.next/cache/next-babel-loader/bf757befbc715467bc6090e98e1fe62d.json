{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from '../components/layout';\nimport '../static/styles/home.scss';\nimport Aside from '../components/aside';\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport config from '../config';\nimport Axios from 'axios';\nimport { getInitialDataAside } from '../store/data';\nimport { convertTitle, getParamsURL } from '../utils/convert';\nimport Router from 'next/router';\nimport { observer, inject } from 'mobx-react';\nimport storeInstance from '../store/store';\nlet limit = 10;\n\nconst Home = props => {\n  const {\n    0: data,\n    1: setData\n  } = useState(props.posts);\n  const {\n    0: videos,\n    1: setVideo\n  } = useState(props.videos);\n  const {\n    0: isLoad,\n    1: setLoad\n  } = useState(false);\n  const {\n    0: isLoadBtn,\n    1: setLoadBtn\n  } = useState(true);\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  useEffect(() => {\n    if (data.length < limit) {\n      setLoadBtn(false);\n    }\n  }, []);\n  return __jsx(Layout, {\n    title: 'Blush',\n    compositions: props.compositions,\n    categories: props.categories\n  }, __jsx(\"div\", {\n    className: \"site-branding\"\n  }, __jsx(Link, {\n    href: \"/blush-classic\"\n  }, __jsx(\"img\", {\n    src: require('../static/images/blush_title.png')\n  }))), __jsx(\"div\", {\n    className: \"site-content\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-lg-8\"\n  }, __jsx(\"div\", {\n    className: \"site-main\"\n  }, data && data[0] ? __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"home-entry-thumbnail\",\n    onClick: () => {}\n  }, __jsx(\"img\", {\n    src: config.host.upload + data[0].image\n  })), __jsx(\"div\", {\n    className: \"home-entry-body\"\n  }, __jsx(\"div\", {\n    className: \"home-entry-header\"\n  }, __jsx(\"div\", {\n    className: \"home-entry-meta\"\n  }, data[0].tags.map((e, i) => {\n    return __jsx(Link, {\n      href: config.client.tags + e\n    }, __jsx(\"a\", null, e, \" \", i != data[0].tags.length - 1 ? ', ' : null));\n  })), __jsx(Link, {\n    href: config.client.posts + '/' + convertTitle(data[0].title) + '_' + data[0].idPost + '?category=' + data[0].idCategory\n  }, __jsx(\"h1\", {\n    className: \"home-entry-title\"\n  }, data[0].title))), __jsx(\"div\", {\n    className: \"home-entry-content\"\n  }, __jsx(\"p\", null, data[0].description)))) : null, __jsx(\"div\", {\n    className: \"row\"\n  }, data && data.map((item, index) => {\n    return __jsx(\"div\", {\n      className: \"col-md-6 col-12\",\n      key: index\n    }, __jsx(\"div\", {\n      className: \"card-post\"\n    }, __jsx(\"div\", {\n      className: \"card-entry-thumbnail\"\n    }, __jsx(Link, {\n      href: config.client.posts + '/' + convertTitle(item.title) + '_' + item.idPost + '?category=' + item.idCategory\n    }, __jsx(\"a\", null, __jsx(\"div\", {\n      style: {\n        backgroundImage: 'url(' + `${config.host.upload + item.image}` + ')',\n        backgroundPosition: 'center center',\n        backgroundSize: 'cover'\n      }\n    }, __jsx(\"img\", {\n      style: {\n        visibility: 'hidden'\n      },\n      src: require('../static/images/f1.jpg')\n    }))))), __jsx(\"div\", {\n      className: \"card-entry-body\"\n    }, __jsx(\"div\", {\n      className: \"card-entry-header\"\n    }, __jsx(\"h2\", {\n      className: \"card-entry-title max-line\"\n    }, __jsx(Link, {\n      href: config.client.posts + '/' + convertTitle(item.title) + '_' + item.idPost + '?category=' + item.idCategory\n    }, __jsx(\"a\", null, item.title)))), __jsx(\"div\", {\n      className: \"card-entry-content\"\n    }, __jsx(\"p\", {\n      className: \"max-line\"\n    }, item.description), __jsx(\"div\", {\n      className: \"card-entry-meta\"\n    }, item.tags && item.tags.map((e, i) => {\n      return __jsx(Link, {\n        href: config.client.tags + e\n      }, __jsx(\"a\", null, e, \" \", i != item.tags.length - 1 ? ', ' : null));\n    })), __jsx(Link, {\n      href: config.client.posts + '/' + convertTitle(item.title) + '_' + item.idPost + '?category=' + item.idCategory\n    }, __jsx(\"a\", {\n      className: \"readmore\"\n    }, __jsx(\"button\", {\n      className: \"btn read-more\"\n    }, \"Read more\")))))));\n  })), __jsx(\"div\", {\n    className: \"row justify-content-center\"\n  }, isLoadBtn ? isLoad ? __jsx(\"div\", {\n    className: \"spinner-border text-primary\",\n    role: \"status\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"Loading...\")) : __jsx(\"div\", {\n    className: \"readmore\"\n  }, __jsx(\"button\", {\n    className: \"btn read-more\",\n    onClick: () => loadMore()\n  }, \"read more\")) : null))), __jsx(\"div\", {\n    className: \"col-lg-4\"\n  }, __jsx(Aside, {\n    compositions: props.compositions,\n    categories: props.categories\n  })))), videos ? __jsx(\"div\", {\n    className: \"after-content-home\"\n  }, __jsx(\"h2\", {\n    className: \"widgettitle\"\n  }, \"Follow our Youtube Glowish Official\"), __jsx(\"div\", {\n    className: \"youtube-gallery\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, videos.rows && videos.rows.map((item, index) => {\n    return __jsx(\"div\", {\n      className: \"col-md-4 col-sm-6\"\n    }, __jsx(\"iframe\", {\n      width: \"100%\",\n      height: \"250px\",\n      src: 'https://www.youtube.com/embed/' + getParamsURL(item.link),\n      frameborder: \"0\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n      allowfullscreen: true,\n      className: \" pb-3\"\n    }));\n  })))) : null);\n};\n\nHome.getInitialProps = async function (ctx) {\n  let posts = {};\n  let videos = {};\n  let resPost = await Axios.get(config.host.base + config.path.base.posts + '?page=1&&limit=' + limit, {\n    timeout: 5000\n  }).catch(e => {\n    console.log('Error: ', e.code);\n  });\n  posts = resPost && resPost.data != undefined ? resPost.data : [];\n  let resVideo = await Axios.get(config.host.base + config.path.base.youtubes + '?page=1&&limit=3', {\n    timeout: 5000\n  }).catch(e => {\n    console.log('Error: ', e.code);\n  });\n  videos = resVideo != undefined ? resVideo.data : [];\n  console.log('videos', videos);\n  let data = await getInitialDataAside(); // console.log(\"data\", data);\n\n  return _objectSpread({}, data, {\n    posts: posts,\n    videos: videos\n  });\n};\n\nexport default inject('store')(observer(Home));","map":null,"metadata":{},"sourceType":"module"}