{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect, useRef, Component } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport { EditorState, convertToRaw, ContentState, convertFromHTML } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport Axios from \"axios\";\nimport config from \"../config\";\nimport { uploadCallback } from \"../utils/upload\";\nimport Cookies from \"universal-cookie\";\nconst WysiwygNoSSRWrapper = dynamic(() => import(\"react-draft-wysiwyg\").then(mod => mod.Editor), {\n  loading: () => null,\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-draft-wysiwyg\")],\n    modules: [\"react-draft-wysiwyg\"]\n  }\n});\n\nclass WysiwygEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toolbar\", {\n      options: [\"inline\", \"blockType\", \"fontSize\", \"list\", \"textAlign\", \"link\", \"emoji\", \"image\", \"remove\", \"history\"],\n      inline: {\n        inDropdown: false,\n        className: undefined,\n        component: undefined,\n        dropdownClassName: undefined,\n        options: [\"bold\", \"italic\", \"underline\", \"strikethrough\", \"monospace\"]\n      },\n      blockType: {\n        inDropdown: true,\n        options: [\"Normal\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"Blockquote\", \"Code\"],\n        className: undefined,\n        component: undefined,\n        dropdownClassName: undefined\n      },\n      fontSize: {\n        options: [8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96],\n        className: undefined,\n        component: undefined,\n        dropdownClassName: undefined\n      },\n      list: {\n        inDropdown: false,\n        className: undefined,\n        component: undefined,\n        dropdownClassName: undefined,\n        options: [\"unordered\", \"ordered\", \"indent\", \"outdent\"]\n      },\n      textAlign: {\n        inDropdown: true,\n        className: undefined,\n        component: undefined,\n        dropdownClassName: undefined,\n        options: [\"left\", \"center\", \"right\", \"justify\"]\n      },\n      link: {\n        inDropdown: false,\n        className: undefined,\n        component: undefined,\n        popupClassName: undefined,\n        dropdownClassName: undefined,\n        showOpenOptionOnHover: true,\n        defaultTargetOption: \"_blank\",\n        options: [\"link\", \"unlink\"],\n        linkCallback: undefined\n      },\n      emoji: {\n        className: undefined,\n        component: undefined,\n        popupClassName: undefined,\n        emojis: [\"😀\", \"😁\", \"😂\", \"😃\", \"😉\", \"😋\", \"😎\", \"😍\", \"😗\", \"🤗\", \"🤔\", \"😣\", \"😫\", \"😴\", \"😌\", \"🤓\", \"😛\", \"😜\", \"😠\", \"😇\", \"😷\", \"😈\", \"👻\", \"😺\", \"😸\", \"😹\", \"😻\", \"😼\", \"😽\", \"🙀\", \"🙈\", \"🙉\", \"🙊\", \"👼\", \"👮\", \"🕵\", \"💂\", \"👳\", \"🎅\", \"👸\", \"👰\", \"👲\", \"🙍\", \"🙇\", \"🚶\", \"🏃\", \"💃\", \"⛷\", \"🏂\", \"🏌\", \"🏄\", \"🚣\", \"🏊\", \"⛹\", \"🏋\", \"🚴\", \"👫\", \"💪\", \"👈\", \"👉\", \"👉\", \"👆\", \"🖕\", \"👇\", \"🖖\", \"🤘\", \"🖐\", \"👌\", \"👍\", \"👎\", \"✊\", \"👊\", \"👏\", \"🙌\", \"🙏\", \"🐵\", \"🐶\", \"🐇\", \"🐥\", \"🐸\", \"🐌\", \"🐛\", \"🐜\", \"🐝\", \"🍉\", \"🍄\", \"🍔\", \"🍤\", \"🍨\", \"🍪\", \"🎂\", \"🍰\", \"🍾\", \"🍷\", \"🍸\", \"🍺\", \"🌍\", \"🚑\", \"⏰\", \"🌙\", \"🌝\", \"🌞\", \"⭐\", \"🌟\", \"🌠\", \"🌨\", \"🌩\", \"⛄\", \"🔥\", \"🎄\", \"🎈\", \"🎉\", \"🎊\", \"🎁\", \"🎗\", \"🏀\", \"🏈\", \"🎲\", \"🔇\", \"🔈\", \"📣\", \"🔔\", \"🎵\", \"🎷\", \"💰\", \"🖊\", \"📅\", \"✅\", \"❎\", \"💯\"]\n      },\n      embedded: {\n        className: undefined,\n        component: undefined,\n        popupClassName: undefined,\n        embedCallback: undefined,\n        defaultSize: {\n          height: \"auto\",\n          width: \"auto\"\n        }\n      },\n      image: {\n        className: undefined,\n        component: undefined,\n        popupClassName: undefined,\n        urlEnabled: true,\n        uploadEnabled: true,\n        alignmentEnabled: true,\n        previewImage: true,\n        inputAccept: \"image/gif,image/jpeg,image/jpg,image/png,image/svg\",\n        uploadCallback: this.upload,\n        alt: {\n          present: true\n        },\n        defaultSize: {\n          height: \"auto\",\n          width: \"auto\"\n        }\n      },\n      remove: {\n        className: undefined,\n        component: undefined\n      },\n      history: {\n        inDropdown: false,\n        className: undefined,\n        component: undefined,\n        dropdownClassName: undefined,\n        options: [\"undo\", \"redo\"]\n      }\n    });\n\n    _defineProperty(this, \"setEditor\", editor => {\n      this.editor = editor;\n    });\n\n    _defineProperty(this, \"onEditorStateChange\", editorState => {\n      this.setState({\n        editorState\n      });\n      this.props.callBack(\"EDITOR\", draftToHtml(convertToRaw(editorState.getCurrentContent())));\n    });\n\n    console.log(\"props\", this.props);\n    this.state = {\n      editorState: EditorState.createEmpty()\n    }; // console.log(this.props.content)\n  }\n\n  componentDidMount() {\n    let value = this.props.content; // console.log(\"value\", this.props.content);\n\n    if (value && value != \"\") {\n      const blocksFromHTML = convertFromHTML(value); // console.log(draftToHtml(convertToRaw(value)))\n      // let contentState = ContentState.createFromBlockArray(\n      //   blockHTML.contentBlocks,\n      //   blockHTML.entityMap\n      // );\n      //\n\n      let contentState = ContentState.createFromBlockArray(blocksFromHTML);\n      contentState = this.customContentState(contentState);\n      const editorState = EditorState.createWithContent(contentState);\n      this.setState({\n        editorState: editorState\n      });\n    }\n  }\n\n  upload(file) {\n    return new Promise((resolve, reject) => {\n      let formData = new FormData();\n      formData.append(\"image\", file);\n      Axios.post(config.host.upload + config.path.upload.upFile + \"?token=\" + new Cookies().get(\"user\").token, formData, {\n        \"Content-Type\": \"multipart/form-data\"\n      }).then(res => {\n        console.log(res);\n        resolve({\n          data: {\n            link: config.host.upload + res.data.imageLink\n          }\n        });\n      }).catch(err => {\n        console.log(\"error upload \", err);\n      });\n    });\n  }\n\n  customContentState(contentState) {\n    const newBlockMap = contentState.getBlockMap().map(block => {\n      const entityKey = block.getEntityAt(0);\n\n      if (entityKey !== null) {\n        const entityBlock = contentState.getEntity(entityKey);\n        const entityType = entityBlock.getType();\n\n        switch (entityType) {\n          case \"IMAGE\":\n            {\n              const newBlock = block.merge({\n                type: \"atomic\",\n                text: \"img\"\n              });\n              return newBlock;\n            }\n\n          default:\n            return block;\n        }\n      }\n\n      return block;\n    });\n    const newContentState = contentState.set(\"blockMap\", newBlockMap);\n    return newContentState;\n  }\n\n  render() {\n    const {\n      editorState\n    } = this.state;\n    return __jsx(\"div\", null, __jsx(WysiwygNoSSRWrapper, {\n      ref: this.setEditor,\n      editorState: editorState,\n      wrapperClassName: \"wysiwyg-wrapper\",\n      editorClassName: \"wysiwyg-editor\",\n      onEditorStateChange: this.onEditorStateChange,\n      toolbar: this.toolbar,\n      blockRenderMap: this.blockRenderMap\n    }));\n  }\n\n}\n\nexport default WysiwygEditor;","map":null,"metadata":{},"sourceType":"module"}