{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Router from 'next/router';\nimport { useRouter } from 'next/router';\nimport '../../static/styles/blush-classic.scss';\nimport Layout from '../../components/layout';\nimport Aside from '../../components/aside';\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport config from '../../config';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport { inject, observer } from 'mobx-react';\nimport { getInitialDataAside } from '../../store/data';\nimport { convertTitle } from '../../utils/convert';\n\nconst PostDetail = props => {\n  const {\n    0: isSearch,\n    1: changeSearch\n  } = useState(false);\n  let routes = useRouter();\n  console.log('PostDetail', props.store.likesCount);\n  useEffect(() => {\n    console.log('PostDetail likesCount', props.store.likesCount);\n  }, []);\n\n  const callBack = (key, value) => {\n    console.log(key, value);\n\n    switch (key) {\n      case 'CHECK_SEARCH':\n        changeSearch(!isSearch);\n        break;\n\n      case 'SEARCH':\n        changeSearch(false);\n        alert(value);\n\n      default:\n        break;\n    }\n  };\n\n  return __jsx(Layout, {\n    title: 'Beauty Favorites for Summer â€“ Blush ',\n    callBack: callBack,\n    isSearch: isSearch,\n    categories: props.categories,\n    compositions: props.compositions\n  }, __jsx(\"div\", {\n    className: \"site-branding\"\n  }, __jsx(Link, {\n    href: \"/blush-classic\"\n  }, __jsx(\"img\", {\n    src: require('../../static/images/blush_title.png')\n  }))), __jsx(\"div\", {\n    className: \"site-content\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-lg-8\"\n  }, __jsx(\"div\", {\n    className: \"site-main\"\n  }, __jsx(\"div\", {\n    className: \"detail-entry-thumbnail\"\n  }, __jsx(\"img\", {\n    src: config.host.upload + props.data.image\n  })), __jsx(\"div\", {\n    className: \"detail-post-header\"\n  }, __jsx(\"div\", {\n    className: \"detail-post-entry-meta\"\n  }, __jsx(\"span\", {\n    className: \"cat-links\"\n  }, props.data.tags && props.data.tags.map((item, index) => {\n    return __jsx(\"a\", {\n      href: item\n    }, item, index != props.data.tags.length - 1 ? ', ' : null);\n  })), \"|\", __jsx(\"span\", {\n    className: \"posted-on\"\n  }, __jsx(\"time\", null, moment(props.data.updatedAt || props.data.createdAt).format('DD. MMM YYYY')))), __jsx(\"h1\", {\n    className: \"detail-post-entry-title\"\n  }, props.data.title)), __jsx(\"div\", {\n    className: \"detail-post-entry-content\"\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: props.data.content\n    }\n  })), props.posts && props.posts.length > 0 ? __jsx(\"div\", {\n    className: \"related-posts\"\n  }, __jsx(\"h3\", {\n    className: \"related-title\"\n  }, \"Related Posts\"), __jsx(\"div\", {\n    className: \"featured\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, props.posts.map((item, index) => {\n    return __jsx(\"div\", {\n      className: \"col-md-4 col-sm-6 col-12\"\n    }, __jsx(\"div\", {\n      className: \"detail-post\"\n    }, __jsx(\"div\", {\n      className: \"entry-thumbnail\"\n    }, __jsx(Link, {\n      href: config.client.posts + '/' + convertTitle(item.title) + '_' + item.idPost\n    }, __jsx(\"a\", null, __jsx(\"div\", {\n      style: {\n        backgroundImage: 'url(' + `${config.host.upload + item.image}` + ')',\n        backgroundPosition: 'center center',\n        backgroundSize: 'cover'\n      }\n    }, __jsx(\"img\", {\n      style: {\n        visibility: 'hidden'\n      },\n      src: require('../../static/images/f1.jpg')\n    }))))), __jsx(\"div\", {\n      className: \"entry-header\"\n    }, __jsx(\"div\", {\n      className: \"entry-title max-line\"\n    }, __jsx(Link, {\n      href: config.client.posts + '/' + convertTitle(item.title) + '_' + item.idPost\n    }, __jsx(\"a\", null, item.title))), __jsx(\"div\", {\n      className: \"posted-on\"\n    }, __jsx(\"time\", null, moment(item.updatedAt || item.createdAt).format('DD. MMM YYYY'))))));\n  })))) : null)), __jsx(\"div\", {\n    className: \"col-lg-4\"\n  }, __jsx(Aside, {\n    categories: props.categories,\n    compositions: props.compositions\n  })))));\n};\n\nPostDetail.getInitialProps = async function (ctx) {\n  const {\n    req,\n    res,\n    query\n  } = ctx;\n  let data = {};\n  let posts = {};\n  let resPost = await Axios.get(config.host.base + config.client.postsCategory + query.category + '?page=1&&limit=3').catch(e => {\n    console.log('Error: ', e.code);\n  });\n  posts = resPost && resPost.data != undefined ? resPost.data : [];\n  let resPostDetail = await Axios.get(config.host.base + config.path.base.posts + '/' + query.id).catch(e => {\n    console.log('Error: ', e.code);\n    res.redirect('/');\n  });\n  data = resPostDetail && resPostDetail.data != undefined ? resPostDetail.data : [];\n  const dataa = await getInitialDataAside();\n  return _objectSpread({}, dataa, {\n    data: data,\n    posts: posts\n  });\n};\n\nexport default inject('store')(observer(PostDetail));","map":null,"metadata":{},"sourceType":"module"}